#! /usr/local/bin/python3

import re
# from functools import reduce, lru_cache
# from collections import deque
# from itertools import count, islice

INPUT_FILE = f'{__file__}.input'

def parse(file):
  # Stand-up everyday at 9:30am
  TIME_DESC = (r'(?P<day_desc>\w+) at (?P<hours>\d+)(:(?P<minutes>\d+))?(?P<am_pm>am|pm)')
  LINE_PATTERN = re.compile(r'^(?P<name>.+) %s(\s|$)' % TIME_DESC)
  def parse_line(line):
    match = LINE_PATTERN.search(line)
    return match.groupdict()

  with open(file) as input:
    return (parse_line(line) for line in input.readlines())

def pp_event(name="", day_desc="", hours="", minutes="", am_pm=""):
  return f'{hours}:{minutes if minutes is not None else "00"}{am_pm} - {name}'

def event_occurs_on_day(event, day):
  return event['day_desc'] == f'{day}s' or event['day_desc'] == 'everyday'

def military_time_for_event(event):
  minutes = 0 if event['minutes'] is None else int(event['minutes'])
  hours = int(event['hours']) if event['am_pm'] == 'am' else int(event['hours']) + 12
  return hours * 100 + minutes

def process(input):
  events = list(input)
  def agenda(day):
    print(f'{day.capitalize()}:')
    day_events = filter(lambda event: event_occurs_on_day(event, day), events)
    for event in sorted(day_events, key=lambda event: military_time_for_event(event)):
      print('  ', pp_event(**event))
  return agenda

input = parse(INPUT_FILE)
agenda = process(input)
for day in 'monday, tuesday, wednesday, thursday, friday'.split(', '):
  agenda(day)