#! /usr/local/bin/python3
INPUT_FILE = f'{__file__}.input'

def parse(file):
  with open(file) as input:
    numbers = input.read().strip().split(',')
    return [int(number) for number in numbers]

def fuel_calculator_part_1(a, b):
  return abs(a - b)

def fuel_calculator_part_2(a, b):
  distance = abs(a - b)
  return int(distance * (distance + 1) / 2)

def total_fuel_need_function(input, fuel_calculator):
  """
  Returns a function that will calculate the total fuel need to align to
  a specific value (goal), based on a given input and fuel_calculator
  Results are memoized so the fuel needed to reach a goal is only calculated once per goal.
  """
  memo = {}
  def aux(goal):
    if goal not in memo:
      memo[goal] = sum(fuel_calculator(goal, i) for i in input)
    return memo[goal]
  return aux

def find_minimum(fuel_need, position):
  """
  Calculates fuel needed to go to the previous and next postion, and
  follow the one that is lowest
  """
  before_value = fuel_need(position - 1)
  after_value = fuel_need(position + 1)
  if before_value < fuel_need(position):
    return find_minimum(fuel_need, position - 1)
  if after_value < fuel_need(position):
    return find_minimum(fuel_need, position + 1)
  return fuel_need(position)

def process(input, fuel_calculator):
  average =  sum(input) // len(input)
  total_fuel = total_fuel_need_function(input, fuel_calculator)
  return find_minimum(total_fuel, average)

print(process(parse(INPUT_FILE), fuel_calculator_part_1))
print(process(parse(INPUT_FILE), fuel_calculator_part_2))

test_input = [16,1,2,0,4,2,7,1,2,14]
assert process(test_input, fuel_calculator_part_1) == 37
assert process(test_input, fuel_calculator_part_2) == 168