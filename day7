#! /usr/local/bin/python3
INPUT_FILE = f'{__file__}.input'

def parse(file):
  with open(file) as input:
    numbers = input.read().strip().split(',')
    return [int(number) for number in numbers]

def fuel_calculator_part_1(a, b):
  return abs(a - b)

def fuel_calculator_part_2(a, b):
  distance = abs(a - b)
  return int(distance * (distance + 1) / 2)

def total_fuel_need_function(input, fuel_calculator):
  """
  Returns a function that will calculate the total fuel need to align to
  a specific value (goal), based on a given input and fuel_calculator
  Results are memoized so the fuel needed to reach a goal is only calculated once per goal.
  """
  memo = {}
  def aux(goal):
    if goal not in memo:
      memo[goal] = sum(fuel_calculator(goal, i) for i in input)
    return memo[goal]
  return aux

def find_minimum(fuel_need, start, end):
  """
  Uses divide and conquer to hone in on the minimum
  """
  step = (end - start) // 3
  if step < 2:
    return min(fuel_need(i) for i in range(start, end + 1))
  positions = [start, start + step, end - step, end]
  fuel_for_pos = [fuel_need(pos) for pos in positions]
  min_position = positions[fuel_for_pos.index(min(fuel_for_pos))]
  return find_minimum(fuel_need, min_position - step, min_position + step)

def process(input, fuel_calculator):
  total_fuel = total_fuel_need_function(input, fuel_calculator)
  return find_minimum(total_fuel, min(input), max(input))

print(process(parse(INPUT_FILE), fuel_calculator_part_1))
print(process(parse(INPUT_FILE), fuel_calculator_part_2))

assert process(parse(INPUT_FILE), fuel_calculator_part_1) == 328318
assert process(parse(INPUT_FILE), fuel_calculator_part_2) == 89791146

test_input = [16,1,2,0,4,2,7,1,2,14]
assert process(test_input, fuel_calculator_part_1) == 37
assert process(test_input, fuel_calculator_part_2) == 168