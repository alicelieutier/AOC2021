#! /usr/local/bin/python3

import re
from functools import reduce
from typing import final
from itertools import count

INPUT_FILE = f'{__file__}.input'
TEST_FILE = 'test.input'
NB_SIZE = {
  INPUT_FILE : 12,
  TEST_FILE : 5
}

def parse(file):
  def parse_line(line):
    return tuple(int(char) for char in line.strip())
  with open(file) as input:
    return (parse_line(line) for line in input.readlines())

def process_part_1(input):
  def replace_0s_with_minus_1s(sequence):
    return tuple(map(lambda x : 1 if x == 1 else -1, sequence))
  replaced_input = (replace_0s_with_minus_1s(item) for item in input)

  initial = next(replaced_input)
  def calculate_each_bit(acc, element):
    return tuple(a + b for a, b in zip(acc, element))
  average_bit_direction = reduce(calculate_each_bit, replaced_input, initial)

  gamma_tuple = tuple(map(lambda x : 0 if x < 0 else 1, average_bit_direction))
  epsilon_tuple = tuple(map(lambda x : 1 if x < 0 else 0, average_bit_direction))
  gamma = int(''.join(str(i) for i in gamma_tuple), 2)
  epsilon = int(''.join(str(i) for i in epsilon_tuple), 2)
  return gamma, epsilon, gamma*epsilon

print(process_part_1(parse(INPUT_FILE)))

def parse_numbers(file):
  with open(file) as input:
    return NB_SIZE[file], {int(line.strip(), 2) for line in input.readlines()}

def bit_is_set(number, position):
  return number & (1 << position) > 0

def find_oxygen_generator_rating(candidates, position):
  if len(candidates) == 1:
    return candidates.pop()
  if len(candidates) < 1 or position < 0:
    raise Exception(f"This should not happen. {candidates}, {position}")

  ones = {number for number in candidates if bit_is_set(number, position)}
  zeroes = candidates - ones
  if len(ones) >= len(zeroes):
    return find_oxygen_generator_rating(ones, position - 1)
  return find_oxygen_generator_rating(zeroes, position - 1)


def find_co2_scrubber_rating(candidates, position):
  if len(candidates) == 1:
    return candidates.pop()
  if len(candidates) < 1 or position < -1:
    raise Exception(f"This should not happen. {candidates}, {position}")

  ones = {number for number in candidates if bit_is_set(number, position)}
  zeroes = candidates - ones
  if len(zeroes) <= len(ones):
    return find_co2_scrubber_rating(zeroes, position - 1)
  return find_co2_scrubber_rating(ones, position - 1)


def process_part_2(input):
  nb_size, numbers = input
  # print(numbers)
  oxy_rating = find_oxygen_generator_rating(numbers, nb_size - 1)
  co2_rating = find_co2_scrubber_rating(numbers, nb_size - 1)
  return oxy_rating, co2_rating, oxy_rating*co2_rating

print(process_part_2(parse_numbers(INPUT_FILE)))
