#! /usr/local/bin/python3

import re
from collections import Counter

INPUT_FILE = f'{__file__}.input'
TEST_FILE = 'test.input'

def parse(file):
  LINE_PATTERN = re.compile(r'^(\d+),(\d+) -> (\d+),(\d+)(\s|$)')
  def parse_line(line):
    match = LINE_PATTERN.search(line)
    x0,y0,x1,y1,_ = match.groups()
    return ((int(x0),int(y0)),(int(x1),int(y1)))

  with open(file) as input:
    return (parse_line(line) for line in input.readlines())

def is_horizontal_or_vertical(line):
  (x0,y0),(x1,y1) = line
  return x0 == x1 or y0 == y1

def better_range(start, end):
  """Provides a range going up or down, including both start and end"""
  if (end > start): return range(start, end + 1)
  return range(start, end - 1, -1)

def points_in_line(line):
  (x0,y0),(x1,y1) = line
  if x0 == x1:
    return ((x0, y) for y in better_range(y0, y1))
  if y0 == y1:
    return ((x, y0) for x in better_range(x0, x1))
  return ((x, y) for x, y in zip(better_range(x0, x1), better_range(y0, y1)))

def process_part_1(input):
  counter = Counter()
  for line in input:
    if is_horizontal_or_vertical(line):
      counter.update(points_in_line(line))
  return len([point for point, frequency in counter.items() if frequency >= 2])

def process_part_2(input):
  counter = Counter()
  for line in input:
    counter.update(points_in_line(line))
  return len([point for point, frequency in counter.items() if frequency >= 2])

print(process_part_1(parse(INPUT_FILE)))
print(process_part_2(parse(INPUT_FILE)))

assert set(points_in_line(((1,3),(1,0)))) == {(1,3),(1,2),(1,1),(1,0)}
assert set(points_in_line(((0,4),(4,0)))) == {(0,4),(1,3),(2,2),(3,1),(4,0)}

test_input = [
  ((0, 9), (5, 9)),
  ((8, 0), (0, 8)),
  ((9, 4), (3, 4)),
  ((2, 2), (2, 1)),
  ((7, 0), (7, 4)),
  ((6, 4), (2, 0)),
  ((0, 9), (2, 9)),
  ((3, 4), (1, 4)),
  ((0, 0), (8, 8)),
  ((5, 5), (8, 2)),
]
assert process_part_1(test_input) == 5
assert process_part_2(test_input) == 12