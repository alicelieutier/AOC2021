#! /usr/local/bin/python3
import re

INPUT_FILE = f'{__file__}.input'
TEST_FILE = 'test.input'

def parse(file):
  with open(file) as input:
    lines = input.readlines()
    draw = list(map(int, lines[0].strip().split(',')))
    line_nb = 1
    boards = []
    while(line_nb < len(lines)):
      line_nb += 1
      board = lines[line_nb:line_nb + 5]
      board = [[int(i) for i in re.split(' +', row.strip())] for row in board]
      rows = [set(row) for row in board]
      columns = [{board[j][i] for j in range(5)} for i in range(5)]
      boards.append((rows, columns))
      line_nb += 5
    return draw, boards

# board module
def is_win(board):
  rows, columns = board
  return any(len(row) == 0 for row in rows) or any(len(column) == 0 for column in columns)

def score(board):
  """Returns the sum of all unmarked (removed) number on a board"""
  rows, _ = board
  return sum(sum(row) for row in rows)

def mark(board, number):
  """
  Mutates the board to remove the marked number.
  Returns the final score if the board has been won.
  Returns None otherwise
  """
  rows, columns = board
  rows = [row.discard(number) for row in rows]
  columns = [column.discard(number) for column in columns]
  if is_win(board):
    return score(board) * number
  return None

def process_part_1(input):
  draw, boards = input
  for number in draw:
    for board in boards:
      win = mark(board, number)
      if win is not None: return win
  return 'no winner'

def process_part_2(input):
  draw, boards = input
  last_final_score = None
  for number in draw:
    for board in boards[:]:
      win = mark(board, number)
      if win is not None:
        last_final_score = win
        boards.remove(board)
  return last_final_score

print(process_part_1(parse(INPUT_FILE)))
assert process_part_1(parse(INPUT_FILE)) == 67716

print(process_part_2(parse(INPUT_FILE)))
assert process_part_2(parse(INPUT_FILE)) == 1830