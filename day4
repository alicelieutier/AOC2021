#! /usr/local/bin/python3

import re

INPUT_FILE = f'{__file__}.input'
TEST_FILE = 'test.input'

def parse(file):
  with open(file) as input:
    lines = input.readlines()
    draw = list(map(int, lines[0].strip().split(',')))
    line_nb = 1
    boards = []
    while(line_nb < len(lines)):
      line_nb += 1
      board = lines[line_nb:line_nb + 5]
      board = [[int(i) for i in re.split(' +', row.strip())] for row in board]
      rows = [set(row) for row in board]
      columns = [{board[j][i] for j in range(5)} for i in range(5)]
      boards.append((rows, columns))
      line_nb += 5
    return draw, boards

# board module
def mark(board, number):
  """returns a board where number was marked (removed)"""
  rows, columns = board
  rows = [row.discard(number) for row in rows]
  columns = [column.discard(number) for column in columns]
  return (rows, columns)

def is_win(board):
  rows, columns = board
  return any(len(row) == 0 for row in rows) or any(len(column) == 0 for column in columns)

def score(board):
  """returns the sum of all unmarked (removed) number on a board"""
  rows, _ = board
  return sum(sum(row) for row in rows)

def process_part_1(input):
  draw, boards = input
  for number in draw:
    for board in boards:
      mark(board, number)
      if is_win(board):
        return score(board) * number
  return 'no winner'

def process_part_2(input):
  draw, boards = input
  last_board = None
  last_win_number = None
  for number in draw:
    index = 0
    while index < len(boards):
      board = boards[index]
      mark(board, number)
      if is_win(board):
        last_board = board
        last_win_number = number
        boards.pop(index)
        index =-1
      index += 1
  return score(last_board) * last_win_number


print(process_part_1(parse(INPUT_FILE)))
assert process_part_1(parse(TEST_FILE)) == 4512

print(process_part_2(parse(INPUT_FILE)))
assert process_part_2(parse(TEST_FILE)) == 1924