#! /usr/local/bin/python3
import re
from itertools import islice

INPUT_FILE = f'{__file__}.input'
TEST_FILE = 'test.input'

def parse_board(lines):
  board = [[int(i) for i in re.split(' +', line.strip())] for line in lines]
  rows = [set(row) for row in board]
  columns = [{board[j][i] for j in range(5)} for i in range(5)]
  return rows, columns

def parse(file):
  with open(file) as input:
    lines = input.readlines()
    draw = (int(number) for number in lines[0].strip().split(','))
    boards = []
    for line_nb in range(2, len(lines), 6):
      board = parse_board(islice(lines, line_nb, line_nb + 5))
      boards.append(board)
    return draw, boards

# board module
def is_win(board):
  rows, columns = board
  return any(len(row) == 0 for row in rows) or any(len(column) == 0 for column in columns)

def score(board):
  """Returns the sum of all remaining (unmarked) numbers on a board"""
  rows, _ = board
  return sum(sum(row) for row in rows)

def mark(board, number):
  """
  Mutates the board to remove the marked number.
  Returns the final score if the board has been won.
  Returns None otherwise
  """
  rows, columns = board
  rows = [row.discard(number) for row in rows]
  columns = [column.discard(number) for column in columns]
  if is_win(board):
    return score(board) * number
  return None

def process(input):
  draw, boards = input
  wins = []
  for number in draw:
    for board in boards[:]:
      win = mark(board, number)
      if win is not None:
        wins.append(win)
        boards.remove(board)
  return wins[0], wins[-1]

first_win, last_win = process(parse(INPUT_FILE))
print(first_win, last_win)

assert first_win == 67716
assert last_win == 1830