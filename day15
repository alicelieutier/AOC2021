#! /usr/local/bin/python3
from heapq import heappop, heappush

INPUT_FILE = f'{__file__}.input'
TEST_FILE = 'test.input'

def parse(file):
  def parse_line(line):
    return [int(character) for character in line]
  with open(file) as input:
    return [parse_line(line.strip()) for line in input.readlines()]

def neighbours(size_i, size_j, i, j):
  potential_neighbours = [
    (i, j-1), (i-1, j), (i+1, j), (i, j+1),
  ]
  return {
    (ni, nj) for ni, nj in potential_neighbours
    if ni >= 0 and ni < size_i and nj >= 0 and nj < size_j
  }

"""
The entire cave is actually five times larger in both dimensions
than you thought; the area you originally scanned is just one tile
in a 5x5 tile area that forms the full map. Your original map tile
repeats to the right and downward; each time the tile repeats to the
right or downward, all of its risk levels are 1 higher than the tile
immediately up or left of it. However, risk levels above 9 wrap back
around to 1. So, if your original map had some position with a risk
level of 8, then that same position on each of the 25 total tiles
would be as follows:
"""
def wrap_value(number):
  return (number - 1) % 9 + 1

assert wrap_value(1) == 1
assert wrap_value(8) == 8
assert wrap_value(9) == 9
assert wrap_value(10) == 1
assert wrap_value(11) == 2

def value_getter(input):
  memo = {}
  size_i, size_j = len(input), len(input[0])
  def aux(i, j):
    if (i, j) not in memo:
      # find the reference
      ref_i = i % size_i
      ref_j = j % size_j
      # find the factor
      factor_i = i // size_i
      factor_j = j // size_j
      memo[(i, j)] = wrap_value(input[ref_i][ref_j] + factor_i + factor_j)
    return memo[(i, j)]
  return aux

test_grid = [[1,2],[3,4]]
assert value_getter(test_grid)(0,0) == 1
assert value_getter(test_grid)(1,1) == 4
assert value_getter(test_grid)(0,2) == 2
assert value_getter([[8]])(2,4) == 5
assert value_getter([[8]])(4,4) == 7

def heuristic(node1, node2=(0,0)):
  i0, j0 = node1
  i1, j1 = node2
  return 1 * (abs(i0 - i1) + abs(j0 - j1))

def distance_from_start_store(size_i, size_j):
  distance_from_start = [[None for _ in range(size_i)] for r in range(size_j)]
  def set(node, value):
    i, j = node
    if distance_from_start[i][j] is not None:
      value = min(value, distance_from_start[i][j])
    distance_from_start[i][j] = value

  def retrieve(node):
    i, j = node
    return distance_from_start[i][j]

  def is_set(node):
    i, j = node
    return distance_from_start[i][j] is not None

  return set, retrieve, is_set

def a_star(get_value, start, goal, size_i, size_j):
  set_distance, retrieve_distance, is_set_distance = distance_from_start_store(size_i, size_j)
  set_distance((0,0), 0)
  to_visit = []
  heappush(to_visit, (heuristic(start, goal), start))
  node_visited = 0

  while len(to_visit) > 0:
    node_visited += 1
    _, current = heappop(to_visit)

    if current == goal:
      break

    around = neighbours(size_i, size_j, *current)
    for node in around:
      new_distance = retrieve_distance(current) + get_value(*node)
      if not is_set_distance(node) or new_distance < retrieve_distance(node):
        set_distance(node, new_distance)
        heappush(to_visit, (new_distance + heuristic(node, goal), node))

  print(f'visited: {node_visited}/{size_j*size_i}')
  return retrieve_distance(goal)

def process_part_1(input):
  size_i, size_j = len(input), len(input[0])
  start = (0,0)
  goal = (size_i - 1, size_j - 1)
  return a_star(value_getter(input), start, goal, size_i, size_j)

def process_part_2(input):
  size_i, size_j = len(input)*5, len(input[0])*5
  start = (0,0)
  goal = (size_i - 1, size_j - 1)
  return a_star(value_getter(input), start, goal, size_i, size_j)

test_input = [
  [1, 1, 6, 3, 7, 5, 1, 7, 4, 2],
  [1, 3, 8, 1, 3, 7, 3, 6, 7, 2],
  [2, 1, 3, 6, 5, 1, 1, 3, 2, 8],
  [3, 6, 9, 4, 9, 3, 1, 5, 6, 9],
  [7, 4, 6, 3, 4, 1, 7, 1, 1, 1],
  [1, 3, 1, 9, 1, 2, 8, 1, 3, 7],
  [1, 3, 5, 9, 9, 1, 2, 4, 2, 1],
  [3, 1, 2, 5, 4, 2, 1, 6, 3, 9],
  [1, 2, 9, 3, 1, 3, 8, 5, 2, 1],
  [2, 3, 1, 1, 9, 4, 4, 5, 8, 1]]
assert process_part_1(test_input) == 40
assert process_part_2(test_input) == 315

print(process_part_1(parse(INPUT_FILE)))
print(process_part_2(parse(INPUT_FILE)))