#! /usr/local/bin/python3

INPUT_FILE = f'{__file__}.input'
TEST_FILE = 'test.input'


def parse(file):
  def parse_line(line):
    return [int(character) for character in line]
  with open(file) as input:
    return [parse_line(line.strip()) for line in input.readlines()]

def neighbours(size_i, size_j, i, j):
  potential_neighbours = [
    (i, j-1), (i-1, j), (i+1, j), (i, j+1),
  ]
  return {
    (ni, nj) for ni, nj in potential_neighbours
    if ni >= 0 and ni < size_i and nj >= 0 and nj < size_j
  }

def blip(node1, node2=(0,0)):
  """Opposite of cap value"""
  i0, j0 = node1
  i1, j1 = node2
  return 3 * (abs(i0 - i1) + abs(j0 - j1))

def lowest_distance_node(nodes, distance_from_start, goal):
  by_dist = {distance_from_start(node) + best_possible_value(node, goal): node for node in nodes}
  return by_dist[min(by_dist.keys())]

def wrap_value(number):
  return (number - 1) % 9 + 1

assert wrap_value(1) == 1
assert wrap_value(8) == 8
assert wrap_value(9) == 9
assert wrap_value(10) == 1
assert wrap_value(11) == 2

"""
The entire cave is actually five times larger in both dimensions
than you thought; the area you originally scanned is just one tile
in a 5x5 tile area that forms the full map. Your original map tile
repeats to the right and downward; each time the tile repeats to the
right or downward, all of its risk levels are 1 higher than the tile
immediately up or left of it. However, risk levels above 9 wrap back
around to 1. So, if your original map had some position with a risk
level of 8, then that same position on each of the 25 total tiles
would be as follows:
"""
def value_getter(input):
  memo = {}
  size_i, size_j = len(input), len(input[0])
  def aux(i, j):
    if (i, j) not in memo:
      # find the reference
      ref_i = i % size_i
      ref_j = j % size_j
      # find the factor
      factor_i = i // size_i
      factor_j = j // size_j
      memo[(i, j)] = wrap_value(input[ref_i][ref_j] + factor_i + factor_j)
    return memo[(i, j)]
  return aux

test_grid = [[1,2],[3,4]]
assert value_getter(test_grid)(0,0) == 1
assert value_getter(test_grid)(1,1) == 4
assert value_getter(test_grid)(0,2) == 2

assert value_getter([[8]])(2,4) == 5
assert value_getter([[8]])(4,4) == 7

def cap_value(node1, node2=(0,0)):
  i0, j0 = node1
  i1, j1 = node2
  return 9 * (abs(i0 - i1) + abs(j0 - j1))

assert cap_value((9,9), (9,9)) == 0
assert cap_value((0,0), (1,1)) == 18
assert cap_value((1,0), (2,2)) == 3*9

def best_possible_value(node1, node2=(0,0)):
  """Opposite of cap value"""
  i0, j0 = node1
  i1, j1 = node2
  return 1 * (abs(i0 - i1) + abs(j0 - j1))

def distance_from_start_store(size_i, size_j):
  distance_from_start = [[None for _ in range(size_i)] for r in range(size_j)]
  def set(node, value):
    i, j = node
    if distance_from_start[i][j] is not None:
      value = min(value, distance_from_start[i][j])
    distance_from_start[i][j] = value

  def retrieve(node):
    i, j = node
    return distance_from_start[i][j]

  return set, retrieve

def a_star(input, start, goal, size_i, size_j, value_getter=None):
  if value_getter is None:
    value_getter = lambda i, j : input[i][j]
  set_distance_from_start, retrieve_distance_from_start = distance_from_start_store(size_i, size_j)
  set_distance_from_start((0,0), 0)
  best_distance_to_goal = cap_value(goal)
  visited = set()
  to_visit = {start}
  node_visited = 0
  while len(to_visit) > 0:
    node_visited += 1
    current = lowest_distance_node(to_visit, retrieve_distance_from_start, goal)
    if current == goal:
      break
    
    to_visit.remove(current)
    visited.add(current)

    if ((retrieve_distance_from_start(current) + best_possible_value(current, goal)) < best_distance_to_goal):
      best_distance_to_goal = min(best_distance_to_goal, retrieve_distance_from_start(current) + cap_value(current, goal))
      around = neighbours(size_i, size_j, *current) - visited
      for node in around:
        set_distance_from_start(node, retrieve_distance_from_start(current) + value_getter(*node))
      to_visit.update(around)
    to_visit = {node for node in to_visit if retrieve_distance_from_start(node) + best_possible_value(node, goal) < best_distance_to_goal} - visited
  print('visited:', node_visited)
  return retrieve_distance_from_start(goal)

def process_part_1(input):
  size_i, size_j = len(input), len(input[0])
  start = (0,0)
  goal = (size_i - 1, size_j - 1)
  return a_star(input, start, goal, size_i, size_j)

def process_part_2(input):
  size_i, size_j = len(input)*5, len(input[0])*5
  start = (0,0)
  goal = (size_i - 1, size_j - 1)
  return a_star(input, start, goal, size_i, size_j, value_getter(input))

assert process_part_1(parse(TEST_FILE)) == 40
assert process_part_2(parse(TEST_FILE)) == 315

print(process_part_1(parse(INPUT_FILE)))
print(process_part_2(parse(INPUT_FILE)))