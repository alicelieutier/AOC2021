#! /usr/local/bin/python3
from functools import reduce

INPUT_FILE = f'{__file__}.input'
TEST_FILE = f'{__file__}_test.input'

# DIGITS = ['abcefg', 'cf', 'acdeg', 'acdfg','bcdf','abdfg','abdefg','acf','abcdefg','abcdfg']

# def digits_per_segment_number():
#   result = {}
#   for d, i in zip(DIGITS, count()):
#     result.setdefault(len(d),[])
#     result[len(d)].append(i)
#   return result

def parse(file):
  def parse_line(line):
    digits, output = line.strip().split(' | ')
    return (digits.split(' '), output.split(' '))
  with open(file) as input:
    return [parse_line(line) for line in input.readlines()]

def process_part_1(input):
  def aux(acc, element):
    _, output = element
    return acc + len([1 for s in output if len(s) in {2,3,4,7}])
  return reduce(aux, input, 0)

def process_part_2(input):
  pass

assert process_part_1(parse(TEST_FILE)) == 26

print(process_part_1(parse(INPUT_FILE)))
# print(process_part_2(parse(INPUT_FILE)))