#! /usr/local/bin/python3
from functools import reduce
from itertools import count

INPUT_FILE = f'{__file__}.input'
TEST_FILE = f'{__file__}_test.input'

def digits_per_segment_number(digits):
  result = {}
  for d in digits:
    result.setdefault(len(d),[])
    result[len(d)].append(d)
  return result

def parse(file):
  def parse_line(line):
    digits, output = line.strip().split(' | ')
    return (digits.split(' '), output.split(' '))
  with open(file) as input:
    return [parse_line(line) for line in input.readlines()]

def process_part_1(input):
  def aux(acc, element):
    _, output = element
    return acc + len([1 for s in output if len(s) in {2,3,4,7}])
  return reduce(aux, input, 0)

def find_first_and_pop(popable, condition):
  item = [item for item in popable if condition(item)][0]
  popable.remove(item)
  return item

def digit_map(digits):
  digits_left = set(digits)
  d0, d1, d2, d3, d4, d5, d6, d7, d8, d9 = [None]*10
  d1 = find_first_and_pop(digits_left, lambda d : len(d) == 2)
  d4 = find_first_and_pop(digits_left, lambda d : len(d) == 4)
  d7 = find_first_and_pop(digits_left, lambda d : len(d) == 3)
  d8 = find_first_and_pop(digits_left, lambda d : len(d) == 7)

  # top segment
  a = (set(d7) - set(d1)).pop()

  # 6 is the only number with 6 digits that doesn't overlap with 7
  d6 = find_first_and_pop(digits_left, lambda d : len(d) == 6 and len(set(d7) - set(d)) == 1)
  
  # top right segment
  c = (set(d8) - set(d6)).pop()

  # now we can have bottom right segment thanks to 1
  f = (set(d1) - {c}).pop()

  # we can now know which of the 5 segments digits are 2, 3 and 5
  # since 3 has both c & f, 2 has c and 5 has f
  d2 = find_first_and_pop(digits_left, lambda d : len(d) == 5 and c in set(d) and not f in set(d))
  d3 = find_first_and_pop(digits_left, lambda d : len(d) == 5 and c in set(d) and f in set(d))
  # 5 is last 5 segment digit
  d5 = find_first_and_pop(digits_left, lambda d : len(d) == 5)

  # middle + bottom segments are what's left when a,c,f are removed from 3
  d_and_g = set(d3) - {a,c,f}

  # zero only have one of middle + bottom
  d0 = find_first_and_pop(digits_left, lambda d : len(d_and_g - set(d)) == 1)

  # nine is the last digit left
  d9 = digits_left.pop()

  # sort digit strings alphabetically
  d0, d1, d2, d3, d4, d5, d6, d7, d8, d9 = [''.join(sorted(d)) for d in [d0, d1, d2, d3, d4, d5, d6, d7, d8, d9]]

  return {d:i for d, i in zip([d0, d1, d2, d3, d4, d5, d6, d7, d8, d9], count())}

def output_value(digits, output):
  code = digit_map(digits)
  output_digits = ''.join([str(code[''.join(sorted(digit))]) for digit in output])
  return int(output_digits)

def process_part_2(input):
  return sum(output_value(digits, output) for digits, output in input)

assert process_part_1(parse(TEST_FILE)) == 26
assert process_part_2(parse(TEST_FILE)) == 61229

print(process_part_1(parse(INPUT_FILE)))
print(process_part_2(parse(INPUT_FILE)))