#! /usr/local/bin/python3
import re
from functools import reduce

INPUT_FILE = f'{__file__}.input'
TEST_FILE = 'test.input'

def parse(file):
  LINE_PATTERN = re.compile(r'^(?P<direction>\w+) (?P<number>\d+)(\s|$)')
  def parse_line(line):
    match = LINE_PATTERN.search(line)
    direction, number = match.group('direction'), int(match.group('number'))
    return (direction, number)

  with open(file) as input:
    return (parse_line(line) for line in input.readlines())

def process_part_1(input):
  def aux(acc, element):
    direction, number = element
    horizontal, depth = acc
    if direction == 'up':
      return (horizontal, depth - number)
    if direction == 'down':
      return (horizontal, depth + number)
    # direction == 'forward'
    return (horizontal + number, depth)
  return reduce(aux, input, (0,0))

def process_part_2(input):
  def aux(acc, element):
    direction, number = element
    horizontal, depth, aim = acc
    if direction == 'up':
      return (horizontal, depth, aim - number)
    if direction == 'down':
      return (horizontal, depth, aim + number)
    # direction == 'forward'
    return (horizontal + number, depth + aim*number, aim)
  return reduce(aux, input, (0,0,0))

horizontal, depth = process_part_1(parse(INPUT_FILE))
print(f'Final position:{(horizontal, depth)}, result: {horizontal * depth}')

horizontal, depth, aim = process_part_2(parse(INPUT_FILE))
print(f'Final position:{(horizontal, depth, aim)}, result: {horizontal * depth}')