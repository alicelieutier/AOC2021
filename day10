#! /usr/local/bin/python3

from functools import reduce

INPUT_FILE = f'{__file__}.input'

def parse(file):
  with open(file) as input:
    return (line.strip() for line in input.readlines())

PAIRS = {
  '(' : ')',
  '[' : ']',
  '{' : '}',
  '<' : '>',
}

ILLEGAL_SCORE = {
  ')' : 3,
  ']' : 57,
  '}' : 1197,
  '>' : 25137,
}

COMPLETION_SCORE = {
  ')' : 1,
  ']' : 2,
  '}' : 3,
  '>' : 4,
}

def scores_for_line(line):
  stack = []
  chars = (char for char in line)
  return scores_for_line_rec(chars, stack)

def scores_for_line_rec(char_gen, stack):
  try:
    char = next(char_gen)
    if char in '[{(<' : return scores_for_line_rec(char_gen, stack + [PAIRS[char]])
    if char != stack.pop(): return (ILLEGAL_SCORE[char], 0)
    return scores_for_line_rec(char_gen, stack)
  except StopIteration:
    return (0, count_stack(stack))

def count_stack(stack):
  aux = lambda score, char: score * 5 + COMPLETION_SCORE[char]
  return reduce(aux, reversed(stack), 0)

def process(input):
  scores = [scores_for_line(line) for line in input]
  part_1_score = sum(illegal_score for illegal_score, _ in scores)
  completion_scores = [completion_score for _, completion_score in scores if completion_score > 0]
  part_2_score = sorted(completion_scores)[len(completion_scores) // 2]
  return part_1_score, part_2_score

test_input = [
  '[({(<(())[]>[[{[]{<()<>>',
  '[(()[<>])]({[<{<<[]>>(',
  '{([(<{}[<>[]}>{[]{[(<()>',
  '(((({<>}<{<{<>}{[]{[]{}',
  '[[<[([]))<([[{}[[()]]]',
  '[{[{({}]{}}([{[{{{}}([]',
  '{<[[]]>}<{[{[{[]{()[[[]',
  '[<(<(<(<{}))><([]([]()',
  '<{([([[(<>()){}]>(<<{{',
  '<{([{{}}[<[[[<>{}]]]>[]]'
]
assert process(test_input) == (26397, 288957)

print(process(parse(INPUT_FILE)))