#! /usr/local/bin/python3

import re
# from functools import reduce, lru_cache
# from collections import deque
# from itertools import count, islice

INPUT_FILE = f'{__file__}.input'
TEST_FILE = 'test.input'

def parse(file):
  with open(file) as input:
    return (line.strip() for line in input.readlines())

PAIRS = {
  '[' : ']',
  '{' : '}',
  '(' : ')',
  '<' : '>',
}

SCORE = {
  ']' : 57,
  '}' : 1197,
  ')' : 3,
  '>' : 25137,
}

def score_for_line(line):
  stack = []
  chars = (char for char in line)
  return score_for_line_rec(chars, stack)

def score_for_line_rec(char_gen, stack):
  try:
    char = next(char_gen)
    if char in '[{(<' : return score_for_line_rec(char_gen, stack + [char])
    expected = PAIRS[stack.pop()]
    if char != expected:
      return SCORE[char]
    return score_for_line_rec(char_gen, stack)
  except StopIteration:
    return 0


def process_part_1(input):
  return sum(score_for_line(line) for line in input)

def process_part_2(input):
  pass

assert process_part_1(parse(TEST_FILE)) == 26397

print(process_part_1(parse(INPUT_FILE)))
# print(process_part_2(parse(INPUT_FILE)))