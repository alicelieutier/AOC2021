#! /usr/local/bin/python3

from functools import reduce
# from collections import deque
from itertools import islice

def read_n_bits(input_char, n):
  return ''.join(next(input_char) for _ in range(n))


def parse_literal_packet(input_char):
  bits = []
  while(next(input_char) == '1'):
    bits.append(read_n_bits(input_char, 4))
  # last group reached starting with a 0
  bits.append(read_n_bits(input_char, 4))
  value = int(''.join(bits), 2)
  return (value, 6 + 5*len(bits))

OPERATORS = {
  0: sum,
  1: lambda args: reduce(lambda a, b: a*b, args),
  2: min,
  3: max,
  5: lambda args: 1 if args[0] > args[1] else 0,
  6: lambda args: 1 if args[0] < args[1] else 0,
  7: lambda args: 1 if args[0] == args[1] else 0,
}

def parse_operator_packet(input_char, type, version_counter):
  length_type_id = next(input_char)
  packet_length = 7
  values = []
  if length_type_id == '0':
    total_length = int(read_n_bits(input_char, 15), 2)
    packet_length += 15
    length = 0
    while length < total_length:
      value, pl = parse_packet(input_char, version_counter)
      length += pl
      values.append(value)
      packet_length += pl
  else:
    nb_of_packets = int(read_n_bits(input_char, 11), 2)
    packet_length += 11
    packet_count = 0
    while packet_count < nb_of_packets:
      value, pl = parse_packet(input_char, version_counter)
      packet_count += 1
      packet_length += pl
      values.append(value)
  total_value = OPERATORS[type](values)
  return (total_value, packet_length)

def parse_packet(input_char, version_counter=None):
  version = int(read_n_bits(input_char, 3), 2)
  packet_type = int(read_n_bits(input_char, 3), 2)
  if version_counter is not None:
    version_counter(version)
  if packet_type == 4:
    return parse_literal_packet(input_char)
  return parse_operator_packet(input_char, packet_type, version_counter)
  
HEX_TO_BIN = {
'0': '0000',
'1': '0001',
'2': '0010',
'3': '0011',
'4': '0100',
'5': '0101',
'6': '0110',
'7': '0111',
'8': '1000',
'9': '1001',
'A': '1010',
'B': '1011',
'C': '1100',
'D': '1101',
'E': '1110',
'F': '1111',
}

def hex_to_binary_string(input):
  return ''.join(HEX_TO_BIN[char] for char in input)

def process_part_1(input):
  version_number_count = 0
  def increase_version_number_sum(number):
    nonlocal version_number_count
    version_number_count += number

  input_char = (char for char in hex_to_binary_string(input))

  parse_packet(input_char, version_counter=increase_version_number_sum)
  return version_number_count

def process_part_2(input):
  input_char = (char for char in hex_to_binary_string(input))

  value, _ = parse_packet(input_char)
  return value

assert process_part_1('D2FE28') == 6
assert process_part_1('8A004A801A8002F478') == 16
assert process_part_1('620080001611562C8802118E34') == 12
assert process_part_1('C0015000016115A2E0802F182340') == 23
assert process_part_1('A0016C880162017C3686B18A3D4780') == 31

assert process_part_2('C200B40A82') == 3
assert process_part_2('04005AC33890') == 54
assert process_part_2('880086C3E88112') == 7
assert process_part_2('CE00C43D881120') == 9
assert process_part_2('D8005AC2A8F0') == 1
assert process_part_2('F600BC2D8F') == 0
assert process_part_2('9C005AC2F8F0') == 0
assert process_part_2('9C0141080250320F1802104A08') == 1

INPUT = 'E0529D18025800ABCA6996534CB22E4C00FB48E233BAEC947A8AA010CE1249DB51A02CC7DB67EF33D4002AE6ACDC40101CF0449AE4D9E4C071802D400F84BD21CAF3C8F2C35295EF3E0A600848F77893360066C200F476841040401C88908A19B001FD35CCF0B40012992AC81E3B980553659366736653A931018027C87332011E2771FFC3CEEC0630A80126007B0152E2005280186004101060C03C0200DA66006B8018200538012C01F3300660401433801A6007380132DD993100A4DC01AB0803B1FE2343500042E24C338B33F5852C3E002749803B0422EC782004221A41A8CE600EC2F8F11FD0037196CF19A67AA926892D2C643675A0C013C00CC0401F82F1BA168803510E3942E969C389C40193CFD27C32E005F271CE4B95906C151003A7BD229300362D1802727056C00556769101921F200AC74015960E97EC3F2D03C2430046C0119A3E9A3F95FD3AFE40132CEC52F4017995D9993A90060729EFCA52D3168021223F2236600ECC874E10CC1F9802F3A71C00964EC46E6580402291FE59E0FCF2B4EC31C9C7A6860094B2C4D2E880592F1AD7782992D204A82C954EA5A52E8030064D02A6C1E4EA852FE83D49CB4AE4020CD80272D3B4AA552D3B4AA5B356F77BF1630056C0119FF16C5192901CEDFB77A200E9E65EAC01693C0BCA76FEBE73487CC64DEC804659274A00CDC401F8B51CE3F8803B05217C2E40041A72E2516A663F119AC72250A00F44A98893C453005E57415A00BCD5F1DD66F3448D2600AC66F005246500C9194039C01986B317CDB10890C94BF68E6DF950C0802B09496E8A3600BCB15CA44425279539B089EB7774DDA33642012DA6B1E15B005C0010C8C917A2B880391160944D30074401D845172180803D1AA3045F00042630C5B866200CC2A9A5091C43BBD964D7F5D8914B46F040'

print('Part 1')
print(process_part_1(INPUT))
print('Part 2')
print(process_part_2(INPUT))
