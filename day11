#! /usr/local/bin/python3
from collections import deque
from functools import reduce

INPUT_FILE = f'{__file__}.input'

def parse(file):
  def parse_line(line):
    return [int(character) for character in line]
  with open(file) as input:
    return [parse_line(line.strip()) for line in input.readlines()]

SIZE = 10

def neighbours(i, j):
  potential_neighbours = [
    (i-1, j-1),
    (i, j-1),
    (i+1, j-1),
    (i-1, j),
    (i+1, j),
    (i-1, j+1),
    (i, j+1),
    (i+1, j+1),
  ]
  return [
    (ni, nj) for ni, nj in potential_neighbours
    if ni >= 0 and ni < SIZE and nj >= 0 and nj < SIZE
  ]

def coord_iterator(size=SIZE):
  return ((i, j) for j in range(size) for i in range(size))

def tick(input, size=SIZE):
  flashers = set()

  # update energy level for all octopuses
  for i, j in coord_iterator(size):
    input[i][j] += 1
    if input[i][j] > 9:
      flashers.add((i, j))
  
  # propagate energy of flashes to neighbours
  to_process = deque(list(flashers))
  while len(to_process) > 0:
    i, j = to_process.popleft()
    for ni, nj in neighbours(i, j):
      input[ni][nj] += 1
      if input[ni][nj] == 10:
        flashers.add((ni, nj))
        to_process.append((ni, nj))

  # reset octopus that flashed to 0
  for i, j in flashers:
    input[i][j] = 0
  return (input, len(flashers))

def octopus_simulator(input, size=SIZE):
  step = 1
  while True:
    input, flashes = tick(input, size=SIZE)
    yield step, flashes
    step += 1

step_0 = [[1, 1, 1, 1, 1], [1, 9, 9, 9, 1], [1, 9, 1, 9, 1], [1, 9, 9, 9, 1], [1, 1, 1, 1, 1]]
step_1 = [[3, 4, 5, 4, 3], [4, 0, 0, 0, 4], [5, 0, 0, 0, 5], [4, 0, 0, 0, 4], [3, 4, 5, 4, 3]]
step_2 = [[4, 5, 6, 5, 4], [5, 1, 1, 1, 5], [6, 1, 1, 1, 6], [5, 1, 1, 1, 5], [4, 5, 6, 5, 4]]

assert tick(step_0, size=5) == (step_1, 9)
assert tick(step_1, size=5) == (step_2, 0)

def process(input, size=SIZE):
  flashes_count = 0
  for step, flashes in octopus_simulator(input):
    if step <= 100: flashes_count += flashes
    if flashes == 100:
      return flashes_count, step

test_input = [[5, 4, 8, 3, 1, 4, 3, 2, 2, 3], [2, 7, 4, 5, 8, 5, 4, 7, 1, 1], [5, 2, 6, 4, 5, 5, 6, 1, 7, 3], [6, 1, 4, 1, 3, 3, 6, 1, 4, 6], [6, 3, 5, 7, 3, 8, 5, 4, 7, 8], [4, 1, 6, 7, 5, 2, 4, 6, 4, 5], [2, 1, 7, 6, 8, 4, 1, 7, 2, 1], [6, 8, 8, 2, 8, 8, 1, 1, 3, 4], [4, 8, 4, 6, 8, 4, 8, 5, 5, 4], [5, 2, 8, 3, 7, 5, 1, 5, 2, 6]]
assert process(test_input) == (1656, 195)

print(process(parse(INPUT_FILE)))