#! /usr/local/bin/python3
import re
from functools import reduce

INPUT_FILE = f'{__file__}.input'

def parse(file):
  LINE_PATTERN = re.compile(r'^fold along (?P<axis>[xy])=(?P<value>\d+)(\s|$)')
  def parse_fold(line):
    match = LINE_PATTERN.search(line)
    axis, value = match.group('axis'), int(match.group('value'))
    return (axis, value)

  def parse_dots(line):
    x, y = line.split(',')
    return (int(x), int(y))

  with open(file) as input:
    dots, folds = input.read().split('\n\n')
    dots = {parse_dots(line) for line in dots.split('\n')}
    folds = [parse_fold(line) for line in folds.split('\n')]
    return dots, folds

def folded_y(x, y, value):
  if y <= value: return x, y
  return x, value - (y - value)

def folded_x(x, y, value):
  if x <= value: return x, y
  return value - (x - value), y

def folded(x, y, axis, value):
  return folded_y(x, y, value) if axis == 'y' else folded_x(x, y, value)

def fold(dots, axis, value):
  return {folded(x, y, axis, value) for x, y in dots}

def print_out(dots):
  max_x = max(x for x, _ in dots)
  max_y = max(y for _, y in dots)
  for y in range(max_y + 1):
    row = ['#' if (x, y) in dots else ' ' for x in range(max_x + 1)]
    print(''.join(row))

def process_part_1(input):
  dots, folds = input
  axis, value = folds[0]
  dots = fold(dots, axis, value)
  return len(dots)

def process_part_2(input):
  dots, folds = input
  def aux(dots, item):
    axis, value = item
    return fold(dots, axis, value)
  return reduce(aux, folds, dots)

test_input = ({(9, 10), (6, 12), (2, 14), (9, 0), (8, 4), (3, 4), (10, 4), (0, 13), (0, 3), (8, 10), (3, 0), (6, 10), (10, 12), (6, 0), (1, 10), (4, 11), (0, 14), (4, 1)}, [('y', 7), ('x', 5)])
assert process_part_1(test_input) == 17
assert process_part_2(test_input) == {(0, 1), (4, 4), (2, 4), (4, 0), (0, 4), (3, 4), (4, 3), (0, 0), (0, 3), (2, 0), (4, 2), (1, 4), (3, 0), (0, 2), (1, 0), (4, 1)}

print(process_part_1(parse(INPUT_FILE)))
print_out(process_part_2(parse(INPUT_FILE)))

