#! /usr/local/bin/python3

import re
# from functools import reduce, lru_cache
# from collections import deque
# from itertools import count, islice

INPUT_FILE = f'{__file__}.input'
TEST_FILE = 'test.input'

def parse(file):
  LINE_PATTERN = re.compile(r'^fold along (?P<axis>[xy])=(?P<value>\d+)(\s|$)')
  def parse_line(line):
    match = LINE_PATTERN.search(line)
    axis, value = match.group('axis'), int(match.group('value'))
    return (axis, value)

  def parse_dots(line):
    x, y = line.split(',')
    return (int(x), int(y))

  with open(file) as input:
    dots, folds = input.read().split('\n\n')
    dots = {parse_dots(line) for line in dots.split('\n')}
    folds = [parse_line(line) for line in folds.split('\n')]
    return dots, folds

def folded_y(x, y, value):
  if y <= value:
    return x, y
  return x, value - (y - value)

def fold_y(dots, value):
  return {folded_y(x, y, value) for x, y in dots}

def folded_x(x, y, value):
  if x <= value:
    return x, y
  return value - (x - value), y

def fold_x(dots, value):
  return {folded_x(x, y, value) for x, y in dots}

def fold(dots, axis, value):
  return fold_y(dots, value) if axis == 'y' else fold_x(dots, value)

def process_part_1(input):
  dots, folds = input
  axis, value = folds[0]
  dots = fold(dots, axis, value)
  return len(dots)

def print_out(dots):
  size_x = max(x for x, _ in dots)
  size_y = max(y for _, y in dots)
  for i in range(size_y + 1):
    row = []
    for j in range(size_x + 1):
      if (j, i) in dots:
        row.append('#')
      else:
        row.append(' ')
    print(''.join(row))

def process_part_2(input):
  dots, folds = input
  for axis, value in folds:
    dots = fold(dots, axis, value)
  print_out(dots)

assert process_part_1(parse(TEST_FILE)) == 17
# process_part_2(parse(TEST_FILE))

print(process_part_1(parse(INPUT_FILE)))
process_part_2(parse(INPUT_FILE))

