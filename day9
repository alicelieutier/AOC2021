#! /usr/local/bin/python3
INPUT_FILE = f'{__file__}.input'

def parse(file):
  def parse_line(line):
    return [int(character) for character in line]
  with open(file) as input:
    return [parse_line(line.strip()) for line in input.readlines()]

def neighbours(input, i, j):
  potential_neighbours = [(i, j-1), (i-1, j), (i+1, j), (i, j+1)]
  return [(ni, nj) for ni, nj in potential_neighbours if ni >= 0 and ni < len(input) and nj >= 0 and nj < len(input[0])]

def is_minimum(input, i, j):
  return all(input[ni][nj] > input[i][j] for ni, nj in neighbours(input, i, j))

def positions(input):
  """returns all coordinates in the input to make it easier to iterate on"""
  return ((i, j) for j in range(len(input[0])) for i in range(len(input)))

def basin_size(input, minimum):
  """returns the size of a basin for a given minimum"""
  # graph traversal through neighbours starting from minimum, stop when value = 9
  to_explore = {minimum}
  basin = set()
  while len(to_explore) > 0:
    i, j = to_explore.pop()
    basin.add((i, j))
    around = set([(ni, nj) for ni, nj in neighbours(input, i, j) if input[ni][nj] < 9])
    to_explore |= (around - basin)
  return len(basin)

def process_part_1(input):
  minimums = ((i, j) for (i, j) in positions(input) if is_minimum(input, i, j))
  return sum(input[i][j] + 1 for (i, j) in minimums)

def process_part_2(input):
  minimums = ((i, j) for (i, j) in positions(input) if is_minimum(input, i, j))
  basin_sizes = (basin_size(input, minimum) for minimum in minimums)
  a, b, c = sorted(basin_sizes, reverse=True)[:3]
  return a*b*c

assert is_minimum([[9,9,9],[9,3,9],[9,9,9]], 1, 1) == True
assert is_minimum([[9,9,9],[9,3,2],[9,9,9]], 1, 1) == False

test_input = [
  [2,1,9,9,9,4,3,2,1,0],
  [3,9,8,7,8,9,4,9,2,1],
  [9,8,5,6,7,8,9,8,9,2],
  [8,7,6,7,8,9,6,7,8,9],
  [9,8,9,9,9,6,5,6,7,8]
]
assert process_part_1(test_input) == 15
assert process_part_2(test_input) == 1134

print(process_part_1(parse(INPUT_FILE)))
print(process_part_2(parse(INPUT_FILE)))
